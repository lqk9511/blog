(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{334:function(s,n,a){"use strict";a.r(n);var e=a(28),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"介绍下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？"}},[s._v("#")]),s._v(" ❓介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？")]),s._v(" "),a("h3",{attrs:{id:"npm-模块安装机制："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-模块安装机制："}},[s._v("#")]),s._v(" npm 模块安装机制：")]),s._v(" "),a("p",[s._v("发出 "),a("code",[s._v("npm install")]),s._v(" 命令")]),s._v(" "),a("p",[s._v("查询 node_modules 目录之中是否已经存在指定模块")]),s._v(" "),a("p",[s._v("若存在，不再重新安装")]),s._v(" "),a("p",[s._v("若不存在")]),s._v(" "),a("p",[s._v("npm 向 registry 查询模块压缩包的网址")]),s._v(" "),a("p",[s._v("下载压缩包，存放在根目录下的.npm 目录里")]),s._v(" "),a("p",[s._v("解压压缩包到当前项目的 node_modules 目录")]),s._v(" "),a("h3",{attrs:{id:"npm-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-实现原理"}},[s._v("#")]),s._v(" npm 实现原理")]),s._v(" "),a("p",[s._v("输入 "),a("code",[s._v("npm install")]),s._v(" 命令并敲下回车后，会经历如下几个阶段（以 npm 5.5.1 为例）：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("执行工程自身 preinstall")]),s._v(" "),a("p",[s._v("当前 npm 工程如果定义了 preinstall 钩子此时会被执行。")])]),s._v(" "),a("li",[a("p",[s._v("确定首层依赖模块")]),s._v(" "),a("p",[s._v("首先需要做的是确定工程中的首层依赖，也就是 dependencies 和 devDependencies 属性中直接指定的模块（假设此时没有添加 npm install 参数）。")]),s._v(" "),a("p",[s._v("工程本身是整棵依赖树的根节点，每个首层依赖模块都是根节点下面的一棵子树，npm 会开启多进程从每个首层依赖模块开始逐步寻找更深层级的节点。")])]),s._v(" "),a("li",[a("p",[s._v("获取模块")]),s._v(" "),a("p",[s._v("获取模块是一个递归的过程，分为以下几步：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("获取模块信息。在下载一个模块之前，首先要确定其版本，这是因为 package.json 中往往是 semantic version（semver，语义化版本）。此时如果版本描述文件（npm-shrinkwrap.json 或 package-lock.json）中有该模块信息直接拿即可，如果没有则从仓库获取。如 packaeg.json 中某个包的版本是 ^1.1.0，npm 就会去仓库中获取符合 1.x.x 形式的最新版本。")])]),s._v(" "),a("li",[a("p",[s._v("获取模块实体。上一步会获取到模块的压缩包地址（resolved 字段），npm 会用此地址检查本地缓存，缓存中有就直接拿，如果没有则从仓库下载。")])]),s._v(" "),a("li",[a("p",[s._v("查找该模块依赖，如果有依赖则回到第 1 步，如果没有则停止。")])])])]),s._v(" "),a("li",[a("p",[s._v("模块扁平化（dedupe）")]),s._v(" "),a("p",[s._v("上一步获取到的是一棵完整的依赖树，其中可能包含大量重复模块。比如 A 模块依赖于 loadsh，B 模块同样依赖于 lodash。在 npm3 以前会严格按照依赖树的结构进行安装，因此会造成模块冗余。")]),s._v(" "),a("p",[s._v("从 npm3 开始默认加入了一个 dedupe 的过程。它会遍历所有节点，逐个将模块放在根节点下面，也就是 node-modules 的第一层。当发现有"),a("strong",[s._v("重复模块")]),s._v("时，则将其丢弃。")]),s._v(" "),a("p",[s._v("这里需要对重复模块进行一个定义，它指的是模块名相同且 semver 兼容。"),a("strong",[s._v("每个 semver 都对应一段版本允许范围，如果两个模块的版本允许范围存在交集，那么就可以得到一个兼容版本")]),s._v("，而不必版本号完全一致，这可以使更多冗余模块在 dedupe 过程中被去掉。")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("比如 node"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("modules 下 foo 模块依赖 lodash@"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v("，bar 模块依赖 lodash@"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v("，则 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v(" 为兼容版本。\n\n而当 foo 依赖 lodash@"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v("，bar 依赖 lodash@"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v("，则依据 semver 的规则，二者不存在兼容版本。\n会将一个版本放在 node_modules 中，另一个仍保留在依赖树里。\n\n举个例子🌰，假设一个依赖树原本是这样：\n\nnode_modules\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" foo\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" lodash@version1\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" bar\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" lodash@version2\n\n假设 version1 和 version2 是兼容版本，则经过 dedupe 会成为下面的形式：\n\nnode_modules\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" foo\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" bar\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" lodash（保留的版本为兼容版本）\n\n假设 version1 和 version2 为非兼容版本，则后面的版本保留在依赖树中：\n\nnode_modules\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" foo\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" lodash@version1\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" bar\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" lodash@version2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[s._v("安装模块")]),s._v(" "),a("p",[s._v("这一步将会更新工程中的 node_modules，并执行模块中的生命周期函数（按照 preinstall、install、postinstall 的顺序）。")])]),s._v(" "),a("li",[a("p",[s._v("执行工程自身生命周期")]),s._v(" "),a("p",[s._v("当前 npm 工程如果定义了钩子此时会被执行（按照 install、postinstall、prepublish、prepare 的顺序）。")])])]),s._v(" "),a("p",[s._v("最后一步是生成或更新版本描述文件，npm install 过程完成")]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/01/npm-install.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("npm 模块安装机制简介"),a("OutboundLink")],1)])]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.bbsmax.com/A/qVdemmnEdP/",target:"_blank",rel:"noopener noreferrer"}},[s._v("详解 npm 的模块安装机制"),a("OutboundLink")],1)])]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.zhihu.com/question/66629910",target:"_blank",rel:"noopener noreferrer"}},[s._v("npm install 的实现原理"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=t.exports}}]);