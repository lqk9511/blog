(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{344:function(e,o,t){"use strict";t.r(o);var a=t(28),n=Object(a.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"cookie-和-token-都存放在-header-中，为什么不会劫持-token？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-token-都存放在-header-中，为什么不会劫持-token？"}},[e._v("#")]),e._v(" ❓cookie 和 token 都存放在 header 中，为什么不会劫持 token？")]),e._v(" "),t("h3",{attrs:{id:"cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[e._v("#")]),e._v(" cookie")]),e._v(" "),t("p",[e._v("用户登陆后，后端生成一个 sessionid 放在 cookie 中返回给客户端，并且服务端一直记录着这个 sessionid，客户端以后每次请求都会自动带上这个 sessionid，服务端通过这个 sessionid 来验证身份之类的操作。所以别人拿到了 cookie 拿到了 sessionid 后，就可以完全替代你。")]),e._v(" "),t("h3",{attrs:{id:"token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[e._v("#")]),e._v(" token")]),e._v(" "),t("p",[e._v("用户登陆后，后端返回一个 token 给客户端，客户端将这个 token 存储起来，然后每次客户端请求都需要开发者手动将 token 放在 header 中带过去，服务端每次只需要对这个 token 进行验证就能使用 token 中的信息来进行下一步操作了。")]),e._v(" "),t("p",[e._v("说下两种常见的 web 攻击")]),e._v(" "),t("blockquote",[t("p",[e._v("XSS：用户通过各种方式将恶意代码注入到其他用户的页面中。就可以通过脚本获取信息，发起请求，之类的操作。")])]),e._v(" "),t("blockquote",[t("p",[e._v("CSRF：跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商>品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了 web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。CSRF 并不能够拿到用户的任何信息，它只是欺骗用户浏览器，让其以用户的名义进行操作。")])]),e._v(" "),t("blockquote",[t("p",[e._v("CSRF 例子：假如一家银行用以运行转账操作的 URL 地址如下： http://www.examplebank.com/withdraw?account=AccoutName&amount=1000&for=PayeeName\n那么，一个恶意攻击者可以在另一个网站上放置如下代码： "),t("code",[e._v('<img src="<http://www.examplebank.com/withdraw?account=Alice&amount=1000&for=Badman>">')]),e._v("\n如果有账户名为 Alice 的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失 1000 资金。")])]),e._v(" "),t("p",[e._v("上面的两种攻击方式，如果被 XSS 攻击了，不管是 token 还是 cookie，都能被拿到，所以对于 XSS 攻击来说，cookie 和 token 没有什么区别。但是对于 CSRF 来说就有区别了。")]),e._v(" "),t("p",[e._v("以上面的 CSRF 攻击为例：")]),e._v(" "),t("ul",[t("li",[e._v("cookie：用户点击了链接，cookie 未失效，导致发起请求后后端以为是用户正常操作，于是进行扣款操作。")]),e._v(" "),t("li",[e._v("token：用户点击链接，由于浏览器不会自动带上 token，所以即使发了请求，后端的 token 验证不会通过，所以不会进行扣款操作。")])]),e._v(" "),t("h3",{attrs:{id:"总结下来："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结下来："}},[e._v("#")]),e._v(" 总结下来：")]),e._v(" "),t("ol",[t("li",[e._v("首先 token 不是防止 XSS 的，而是为了防止 CSRF 的")]),e._v(" "),t("li",[e._v("CSRF 攻击的原因是浏览器会自动带上 cookie，而浏览器不会自动带上 token")])])])}),[],!1,null,null,null);o.default=n.exports}}]);