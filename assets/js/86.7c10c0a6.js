(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{354:function(e,t,r){"use strict";r.r(t);var u=r(28),a=Object(u.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"redux-中的-reducer-为什么最好是纯函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux-中的-reducer-为什么最好是纯函数"}},[e._v("#")]),e._v(" ❓ redux 中的 reducer 为什么最好是纯函数")]),e._v(" "),r("p",[e._v('为什么 reducer 最好是纯函数，首先你得看看文档怎么说 reducer 的作用的，"接收旧的 state 和 action，返回新的 state"，其实就是起一个对数据做简单处理后返回 state 的作用。')]),e._v(" "),r("p",[e._v("那么为什么会设计成这样？因为 redux 的 reducer 的职责不允许有副作用，副作用简单来说就是不确定性，如果 reducer 有副作用，那么返回的 state 就不确定，举个例子，你的 reducer 就做了一个 value = value + 1 这个逻辑，然后返回 state 为{value}，ok，这个过程没有问题，然后你可能觉得要加个请求来取得 value 后再加 1，那么你的逻辑就是 value = getValue() + 1, getValue 是个请求函数，返回一个值，这种情况，退一万步讲，如果你的网络请求这次出错，那么 getValue 就返回的不是一个数值，value 就不确定了，所以 return 的 state 你也不确定了，前端 UI 拿到的数据也不确定了，所以就是这个环节引入了副作用，然后 redux 设计好的规范就被你破坏了。")]),e._v(" "),r("p",[e._v("同时再来看看"),r("RouterLink",{attrs:{to:"/interview/question/38.html"}},[e._v("为什么 Vuex 的 mutation 和 Redux 的 reducer 中不能做异步操作？")])],1)])}),[],!1,null,null,null);t.default=a.exports}}]);